#include <ArduinoJson.h>
#include <SPI.h>
#include <WiFi101.h>
#include "arduino_secrets.h"
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_TSL2561_U.h>
#include <Adafruit_BMP085.h>
#include "ArduinoLowPower.h"

Adafruit_TSL2561_Unified tsl = Adafruit_TSL2561_Unified(TSL2561_ADDR_FLOAT, 12345);
Adafruit_BMP085 bmp;

///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = SECRET_SSID;        // your network SSID (name)
char pass[] = SECRET_PASS;        // your network password (use for WPA, or use as key for WEP)

int status = WL_IDLE_STATUS;
char server[] = "the url to your API server i.e: api.blabla.com";

WiFiSSLClient client;

unsigned long lastConnectionTime = 0;
unsigned long previousMillis = 0;
const unsigned long wifiReconnectInterval = 300L * 1000L; //5 minutes
unsigned long temperature;
unsigned long humidity;
unsigned long presure;
unsigned long luminosity;
char device[] = "mkr1000"; //name of the device posting data to the api server

String token; //token received from the server while authenticating before post the data to the server


//************************************ Initiaslisation **********************************//
void setup() {
    pinMode(LED_BUILTIN, OUTPUT);
}

//******************************* main loop *************************************//
void loop() {
      //Initialise the tsl sensor
      if(!tsl.begin())
      {
        while(1);
      }
      /* Display some basic information on this sensor */
      //displaySensorDetails();
      /* Setup the sensor gain and integration time */
      //configureSensor();
      //Initialise the BMP sensor
      if (!bmp.begin())
      {
         while (1);
      }
      //connec to the wifi
      wifiUp();
      //Blink if the wifi connection was successful
      //blinking();
      luminosityData();
      token = getToken(); //Authenticate over SSL and retrieve the JWT token
      if (token == "0"){
      return;
      }else{
      postData(token); //post (SSL) the weather data with the token provided by getToken () and the measurements from weatherData()
      }
      //Disconnect the wifi once the data is sent and go into deepsleep
      WiFi.disconnect();
      
      delay(500); //give half a second to the board to disconnect the wifi
      LowPower.deepSleep(300000);//go into deep sleep for 5 minutes then wake up make the post and go back to sleep
}

void blinking(){
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
  }


//**** Https request to the REST API  ***//
/*
This function does an HTTPS GET to the API server with email and password credentials
The server replies with a JWT token. The function then makes a post with the sensor data
to the API server using this token.  
 */
String getToken() {   //Returns the JWT Token or "0" if there was an error
client.stop(); 
  if (client.connect(server, 443)) {
    client.println("GET /api/signin HTTP/1.1");
    client.print("Host: ");
    client.println(server);
    client.println("Connection: close");
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.println("Content-Length: 61"); //manually inserted because the length of the email and password + parameters is known and static
    client.println(""); //line return to parse the body
    client.println("email=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&password=xxxxxxxxxx"); //parse the body
  }
  else { //if connect fails check the wifi connection
    wifiUp(); // if no connection check that the wifi is up or try to reconnect
  }
if (client.println() == 0) {
    //Serial.println(F("Failed to send request"));
    return "0"; //not able to post. stop the sequence here until a humain comes and checks the problem
  }
 // Check HTTP status
  char status[32] = {0};
  client.readBytesUntil('\r', status, sizeof(status));
  // It should be "HTTP/1.0 200 OK" or "HTTP/1.1 200 OK"
  if (strcmp(status + 9, "200 OK") != 0) {
    //Serial.print(F("Unexpected response: "));
    //Serial.println(status);
    return "0";
  }
   // Skip HTTP headers
  char endOfHeaders[] = "\r\n\r\n";
  if (!client.find(endOfHeaders)) {
    //Serial.println(F("Invalid response"));
    return "0";
  }
  // Allocate the JSON document
  // Use arduinojson.org/v6/assistant to compute the capacity.
  //const size_t capacity = JSON_OBJECT_SIZE(3) + JSON_ARRAY_SIZE(2) + 60;
  const size_t capacity = 384;
  DynamicJsonDocument doc(capacity);

  // Parse JSON object
  DeserializationError error = deserializeJson(doc, client);
  if (error) {
    //Serial.print(F("deserializeJson() failed: "));
    //Serial.println(error.f_str());
    return "0";
  }
  String token = doc["token"];
  return token;
}



void postData(String token) {
   //*************************************** POST the data using the token ***/
 
   temperature = bmp.readTemperature();
   humidity = random(30, 70);
   presure = bmp.readSealevelPressure();
   luminosity = luminosityData();
  
  client.stop();
  if (client.connect(server, 443)) {
    client.println("POST /api/iot HTTP/1.1");
    client.print("Host: ");
    client.println(server);
    client.println("Connection: close");
    client.print(F("Authorization: Bearer "));
    client.println(token);
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.println("Content-Length: 72");
    client.println("");
    client.print("temperature=");
    client.print(temperature);
    client.print("&humidity=");
    client.print(humidity);
    client.print("&pressure=");
    client.print(presure);
    client.print("&luminosity=");
    client.println(luminosity);
    client.print("&device=");
    client.println(device);
   
   // Check HTTP status
     char status[32] = {0};
  client.readBytesUntil('\r', status, sizeof(status));
  // It should be "HTTP/1.0 200 OK" or "HTTP/1.1 200 OK"
  if (strcmp(status + 9, "201 Created") != 0) {
    //Serial.print(F("Unexpected response: "));
    //Serial.println(status);
    return;
  }else{
    //Serial.println("201 Created");
    }
   // Skip HTTP headers
  char endOfHeaders[] = "\r\n\r\n";
  if (!client.find(endOfHeaders)) {
    //Serial.println(F("Invalid response"));
    return;
  }
}else {
    // if you couldn't make a connection:
    //Serial.println("connection failed");
  }
}
/**** chcks that wifi is up or reconnects *******/
void wifiUp(){
        // check for the presence of the shield:
  if (WiFi.status() == WL_NO_SHIELD) {
    while (true);
  }

  // attempt to connect to WiFi network:
  while (WiFi.status() != WL_CONNECTED) {
    status = WiFi.begin(ssid, pass);
  }
    while (WiFi.status() != 3) { // wifi status when connected is = 3
      unsigned long currentMillis = millis();
      if (currentMillis - previousMillis >= wifiReconnectInterval){
        previousMillis = currentMillis;
        //Serial.print("Attempting to connect to SSID: ");
        //Serial.println(ssid);
        status = WiFi.begin(ssid, pass);
        // wait 5 minutes for connection:
    }
  }
    return;
 }

/*********************** TSL2561 ******************/
 void displaySensorDetails(void)
{
  sensor_t sensor;
  tsl.getSensor(&sensor);
  /*Serial.println("------------------------------------");
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" lux");
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" lux");
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" lux");  
  Serial.println("------------------------------------");
  Serial.println("");*/
  delay(500);
}

void configureSensor(void)
{
  /* You can also manually set the gain or enable auto-gain support */
  // tsl.setGain(TSL2561_GAIN_1X);      /* No gain ... use in bright light to avoid sensor saturation */
  // tsl.setGain(TSL2561_GAIN_16X);     /* 16x gain ... use in low light to boost sensitivity */
  tsl.enableAutoRange(true);            /* Auto-gain ... switches automatically between 1x and 16x */
  
  /* Changing the integration time gives you better sensor resolution (402ms = 16-bit data) */
  // tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_13MS);      /* fast but low resolution */
  // tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_101MS);  /* medium resolution and speed   */
   tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_402MS);  /* 16-bit data but slowest conversions */

  /* Update these values depending on what you've set above! */  
  /*Serial.println("------------------------------------");
  Serial.print  ("Gain:         "); Serial.println("Auto");
  Serial.print  ("Timing:       "); Serial.println("13 ms");
  Serial.println("------------------------------------");*/
}

int luminosityData(){
  sensors_event_t event;
  tsl.getEvent(&event);
 
  /* Display the results (light is measured in lux) */
  if (event.light)
  {
    //Serial.print(event.light); Serial.println(" lux");
    return event.light;
  }
  else
  {
    /* If event.light = 0 lux the sensor is probably saturated
       and no reliable data could be generated! */
    //Serial.println("Sensor overload");
    return event.light;
  }
  }
